// <auto-generated />
using System;
using Evoflare.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Evoflare.API.Migrations
{
    [DbContext(typeof(EvoflareDbContext))]
    [Migration("20190922111435_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Evoflare.API.Auth.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("DefaultPermission");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("PolicyName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","security");
                });

            modelBuilder.Entity("Evoflare.API.Auth.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("Age");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("FacebookId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","security");
                });

            modelBuilder.Entity("Evoflare.API.Auth.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentityId");

                    b.Property<string>("Locale");

                    b.Property<string>("Location");

                    b.Property<string>("PictureUrl");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Profile","core");
                });

            modelBuilder.Entity("Evoflare.API.Core.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<DateTime>("ActivityDate");

                    b.Property<int>("Level");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs","core");
                });

            modelBuilder.Entity("Evoflare.API.Core.Models.AppVersion", b =>
                {
                    b.Property<string>("Name");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Database");

                    b.Property<string>("DatabaseType");

                    b.Property<string>("Organization");

                    b.Property<string>("Version");

                    b.HasKey("Name");

                    b.ToTable("AppVersion","core");
                });

            modelBuilder.Entity("Evoflare.API.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Groups","core");
                });

            modelBuilder.Entity("Evoflare.API.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificationLevel")
                        .HasMaxLength(200);

                    b.Property<string>("Company")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Stack")
                        .HasMaxLength(200);

                    b.Property<string>("Technology")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("Evoflare.API.Models.CertificationExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.ToTable("CertificationExam");
                });

            modelBuilder.Entity("Evoflare.API.Models.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceAreaId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.HasKey("Id");

                    b.HasIndex("CompetenceAreaId")
                        .HasName("IX_EmpCompetence_CompetenceAreaId");

                    b.ToTable("Competence");
                });

            modelBuilder.Entity("Evoflare.API.Models.CompetenceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("Id");

                    b.ToTable("CompetenceArea");
                });

            modelBuilder.Entity("Evoflare.API.Models.CompetenceCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId");

                    b.Property<int>("CompetenceId");

                    b.Property<int>("CompetenceLevelId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CompetenceLevelId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("CompetenceCertificate");
                });

            modelBuilder.Entity("Evoflare.API.Models.CompetenceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId")
                        .HasName("IX_EmpCompetenceLevel_CompetenceId");

                    b.ToTable("CompetenceLevel");
                });

            modelBuilder.Entity("Evoflare.API.Models.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("Evoflare.API.Models.EcfEmployeeEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EndById");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EvaluationId");

                    b.Property<int>("EvaluatorId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("StartById");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EndById");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StartById");

                    b.ToTable("EcfEmployeeEvaluation");
                });

            modelBuilder.Entity("Evoflare.API.Models.EcfEvaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Competence");

                    b.Property<int?>("CompetenceLevel");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EvaluationId");

                    b.HasKey("Id");

                    b.HasIndex("Competence");

                    b.HasIndex("EvaluationId");

                    b.ToTable("EcfEvaluationResult");
                });

            modelBuilder.Entity("Evoflare.API.Models.EcfRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RoleId");

                    b.Property<string>("Summary");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasName("IX_Role");

                    b.ToTable("EcfRole");
                });

            modelBuilder.Entity("Evoflare.API.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeTypeId");

                    b.Property<DateTime?>("HiringDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsManager");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("NameTemp")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Surname")
                        .HasMaxLength(30);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StartedById");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StartedById");

                    b.ToTable("EmployeeEvaluation");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("ManagerId");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("PositionId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamId");

                    b.ToTable("EmployeeRelations");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<int>("Basic");

                    b.Property<int>("Bonus");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSalary");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EmployeeType");
                });

            modelBuilder.Entity("Evoflare.API.Models.EvaluationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EvaluationSchedule");
                });

            modelBuilder.Entity("Evoflare.API.Models.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Idea");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdeaId");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("ParentCommentId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IdeaId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("IdeaComment");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<int>("IdeaId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IdeaId");

                    b.ToTable("IdeaLike");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("IdeaTag");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaTagRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdeaId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("TagId");

                    b.ToTable("IdeaTagRef");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<int>("IdeaId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IdeaId");

                    b.ToTable("IdeaView");
                });

            modelBuilder.Entity("Evoflare.API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<DateTime?>("ViewDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Evoflare.API.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.OrganizationStructureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationStructureType");
                });

            modelBuilder.Entity("Evoflare.API.Models.Pdp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AssessmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CertificateId");

                    b.Property<DateTime?>("ClassroomStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("StudyStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Pdp");
                });

            modelBuilder.Entity("Evoflare.API.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Evoflare.API.Models.PositionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("PositionId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PositionRole");
                });

            modelBuilder.Entity("Evoflare.API.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Evoflare.API.Models.ProjectCareerPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamId");

                    b.ToTable("ProjectCareerPath");
                });

            modelBuilder.Entity("Evoflare.API.Models.ProjectPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CareerPathId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RoleGradeId");

                    b.HasKey("Id");

                    b.HasIndex("CareerPathId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleGradeId");

                    b.ToTable("ProjectPosition");
                });

            modelBuilder.Entity("Evoflare.API.Models.ProjectPositionCompetence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceId");

                    b.Property<int>("CompetenceLevelId");

                    b.Property<int>("ProjectPositionId");

                    b.Property<int>("RoleGradeId");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CompetenceLevelId");

                    b.HasIndex("ProjectPositionId");

                    b.HasIndex("RoleGradeId");

                    b.ToTable("ProjectPositionCompetence");
                });

            modelBuilder.Entity("Evoflare.API.Models.RoleCompetence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceId");

                    b.Property<int>("CompetenceLevel");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId")
                        .HasName("IX_EmpRoleCompetence_CompetenceId");

                    b.HasIndex("RoleId")
                        .HasName("IX_EmpRoleCompetence_RoleId");

                    b.ToTable("RoleCompetence");
                });

            modelBuilder.Entity("Evoflare.API.Models.RoleGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RoleGrade");
                });

            modelBuilder.Entity("Evoflare.API.Models.RoleGradeCompetence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceId");

                    b.Property<int>("CompetenceLevelId");

                    b.Property<int>("RoleGradeId");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CompetenceLevelId");

                    b.HasIndex("RoleGradeId");

                    b.ToTable("RoleGradeCompetence");
                });

            modelBuilder.Entity("Evoflare.API.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Evoflare.API.Models._360employeeEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EvaluationId");

                    b.Property<int>("EvaluatorEmployeeId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("OtherComments");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StartDoing");

                    b.Property<string>("StopDoing");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("EvaluatorEmployeeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("360EmployeeEvaluation");
                });

            modelBuilder.Entity("Evoflare.API.Models._360evaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EvaluationId");

                    b.Property<int>("_360questionnarieStatementId")
                        .HasColumnName("360QuestionnarieStatementId");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("_360questionnarieStatementId");

                    b.ToTable("360EvaluationResult");
                });

            modelBuilder.Entity("Evoflare.API.Models._360evaluationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EvaluationWindowMonths");

                    b.Property<int>("PeriodMonths");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("360EvaluationSchedule");
                });

            modelBuilder.Entity("Evoflare.API.Models._360pendingEvaluator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<int>("EvaluatorId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("_360employeeEvaluationId")
                        .HasColumnName("360EmployeeEvaluationId");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("_360employeeEvaluationId");

                    b.ToTable("360PendingEvaluator");
                });

            modelBuilder.Entity("Evoflare.API.Models._360questionnarie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsForManager");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("360Questionnarie");
                });

            modelBuilder.Entity("Evoflare.API.Models._360questionnarieStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mark");

                    b.Property<int>("QuestionnarieId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("QuestionnarieId");

                    b.ToTable("360QuestionnarieStatement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","security");
                });

            modelBuilder.Entity("Evoflare.API.Auth.Models.UserProfile", b =>
                {
                    b.HasOne("Evoflare.API.Auth.Models.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });

            modelBuilder.Entity("Evoflare.API.Models.Competence", b =>
                {
                    b.HasOne("Evoflare.API.Models.CompetenceArea", "CompetenceArea")
                        .WithMany("Competence")
                        .HasForeignKey("CompetenceAreaId")
                        .HasConstraintName("FK_EmpCompetence_EmpCompetenceArea");
                });

            modelBuilder.Entity("Evoflare.API.Models.CompetenceCertificate", b =>
                {
                    b.HasOne("Evoflare.API.Models.Certificate", "Certificate")
                        .WithMany("CompetenceCertificate")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_CompetenceCertificate_Certificate");

                    b.HasOne("Evoflare.API.Models.Competence", "Competence")
                        .WithMany("CompetenceCertificate")
                        .HasForeignKey("CompetenceId")
                        .HasConstraintName("FK_CompetenceCertificate_EmpCompetence");

                    b.HasOne("Evoflare.API.Models.CompetenceLevel", "CompetenceLevel")
                        .WithMany("CompetenceCertificate")
                        .HasForeignKey("CompetenceLevelId")
                        .HasConstraintName("FK_CompetenceCertificate_EmpCompetenceLevel");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("CompetenceCertificate")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_CompetenceCertificate_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.CompetenceLevel", b =>
                {
                    b.HasOne("Evoflare.API.Models.Competence", "Competence")
                        .WithMany("CompetenceLevel")
                        .HasForeignKey("CompetenceId")
                        .HasConstraintName("FK_EmpCompetenceLevel_EmpCompetence");
                });

            modelBuilder.Entity("Evoflare.API.Models.CustomerContact", b =>
                {
                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("CustomerContact")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_CustomerContact_Organization");

                    b.HasOne("Evoflare.API.Models.Project", "Project")
                        .WithMany("CustomerContact")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CustomerContact_Project");
                });

            modelBuilder.Entity("Evoflare.API.Models.EcfEmployeeEvaluation", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "EndBy")
                        .WithMany("EcfEmployeeEvaluationEndBy")
                        .HasForeignKey("EndById")
                        .HasConstraintName("FK_EcfEmployeeEvaluation_EndByEmployee");

                    b.HasOne("Evoflare.API.Models.EmployeeEvaluation", "Evaluation")
                        .WithMany("EcfEmployeeEvaluation")
                        .HasForeignKey("EvaluationId")
                        .HasConstraintName("FK_EcfEmployeeEvaluation_EmployeeEvaluation");

                    b.HasOne("Evoflare.API.Models.Employee", "Evaluator")
                        .WithMany("EcfEmployeeEvaluationEvaluator")
                        .HasForeignKey("EvaluatorId")
                        .HasConstraintName("FK_EcfEmployeeEvaluation_Evaluator");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("EcfEmployeeEvaluation")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_EcfEmployeeEvaluation_Organization");

                    b.HasOne("Evoflare.API.Models.Employee", "StartBy")
                        .WithMany("EcfEmployeeEvaluationStartBy")
                        .HasForeignKey("StartById")
                        .HasConstraintName("FK_EcfEmployeeEvaluation_StartByEmployee");
                });

            modelBuilder.Entity("Evoflare.API.Models.EcfEvaluationResult", b =>
                {
                    b.HasOne("Evoflare.API.Models.RoleCompetence", "CompetenceNavigation")
                        .WithMany("EcfEvaluationResult")
                        .HasForeignKey("Competence")
                        .HasConstraintName("FK_EcfEvaluationResult_EmpRoleCompetence");

                    b.HasOne("Evoflare.API.Models.EcfEmployeeEvaluation", "Evaluation")
                        .WithMany("EcfEvaluationResult")
                        .HasForeignKey("EvaluationId")
                        .HasConstraintName("FK_EcfEvaluationResults_EcfEmployeeEvaluation");
                });

            modelBuilder.Entity("Evoflare.API.Models.Employee", b =>
                {
                    b.HasOne("Evoflare.API.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employee")
                        .HasForeignKey("EmployeeTypeId")
                        .HasConstraintName("FK_Employee_EmployeeType");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("Employee")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Employee_Organization");

                    b.HasOne("Evoflare.API.Auth.Models.ApplicationUser", "Users")
                        .WithMany("Employee")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeEvaluation", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Employee")
                        .WithMany("EmployeeEvaluationEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeEvaluation_Employee");

                    b.HasOne("Evoflare.API.Models.Employee", "EndedBy")
                        .WithMany("EmployeeEvaluationEndedBy")
                        .HasForeignKey("EndedById")
                        .HasConstraintName("FK_EmployeeEvaluation_EmployeeEndedBy");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("EmployeeEvaluation")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_EmployeeEvaluation_Organization");

                    b.HasOne("Evoflare.API.Models.Employee", "StartedBy")
                        .WithMany("EmployeeEvaluationStartedBy")
                        .HasForeignKey("StartedById")
                        .HasConstraintName("FK_EmployeeEvaluation_EmployeeStartedBy");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeRelations", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Employee")
                        .WithMany("EmployeeRelationsEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeRelations_Employee");

                    b.HasOne("Evoflare.API.Models.Employee", "Manager")
                        .WithMany("EmployeeRelationsManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_EmployeeRelations_Manager");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("EmployeeRelations")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_EmployeeRelations_Organization");

                    b.HasOne("Evoflare.API.Models.Position", "Position")
                        .WithMany("EmployeeRelations")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_EmployeeRelations_Position");

                    b.HasOne("Evoflare.API.Models.Project", "Project")
                        .WithMany("EmployeeRelations")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_EmployeeRelations_Project");

                    b.HasOne("Evoflare.API.Models.Team", "Team")
                        .WithMany("EmployeeRelations")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_EmployeeRelations_Team");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeSalary", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Employee")
                        .WithMany("EmployeeSalary")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeSalary_Employee");
                });

            modelBuilder.Entity("Evoflare.API.Models.EmployeeType", b =>
                {
                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("EmployeeType")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_EmployeeType_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.EvaluationSchedule", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Employee")
                        .WithMany("EvaluationSchedule")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EvaluationSchedule_Employee");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("EvaluationSchedule")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_EvaluationSchedule_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.Idea", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "CreatedBy")
                        .WithMany("Idea")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Idea_Employee");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("Idea")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Idea_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaComment", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "CreatedBy")
                        .WithMany("IdeaComment")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_IdeaComment_Employee");

                    b.HasOne("Evoflare.API.Models.Idea", "Idea")
                        .WithMany("IdeaComment")
                        .HasForeignKey("IdeaId")
                        .HasConstraintName("FK_IdeaComment_Idea");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("IdeaComment")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_IdeaComment_Organization");

                    b.HasOne("Evoflare.API.Models.IdeaComment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK_IdeaComment_ParentIdeaComment");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaLike", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Employee")
                        .WithMany("IdeaLike")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_IdeaLike_Employee");

                    b.HasOne("Evoflare.API.Models.Idea", "Idea")
                        .WithMany("IdeaLike")
                        .HasForeignKey("IdeaId")
                        .HasConstraintName("FK_IdeaLike_Idea");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaTagRef", b =>
                {
                    b.HasOne("Evoflare.API.Models.Idea", "Idea")
                        .WithMany("IdeaTagRef")
                        .HasForeignKey("IdeaId")
                        .HasConstraintName("FK_IdeaTagRef_Idea");

                    b.HasOne("Evoflare.API.Models.IdeaTag", "Tag")
                        .WithMany("IdeaTagRef")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_IdeaTagRef_IdeaTag");
                });

            modelBuilder.Entity("Evoflare.API.Models.IdeaView", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Employee")
                        .WithMany("IdeaView")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_IdeaView_Employee");

                    b.HasOne("Evoflare.API.Models.Idea", "Idea")
                        .WithMany("IdeaView")
                        .HasForeignKey("IdeaId")
                        .HasConstraintName("FK_IdeaView_Idea");
                });

            modelBuilder.Entity("Evoflare.API.Models.Pdp", b =>
                {
                    b.HasOne("Evoflare.API.Models.Certificate", "Certificate")
                        .WithMany("Pdp")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_Pdp_Certificate");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("Pdp")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Pdp_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.Position", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "CreatedByNavigation")
                        .WithMany("PositionCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Position_EmployeeCreatedBy");

                    b.HasOne("Evoflare.API.Models.Project", "Project")
                        .WithMany("Position")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Position_Project");

                    b.HasOne("Evoflare.API.Models.Employee", "UpdatedByNavigation")
                        .WithMany("PositionUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Position_EmployeeUpdatedBy");
                });

            modelBuilder.Entity("Evoflare.API.Models.PositionRole", b =>
                {
                    b.HasOne("Evoflare.API.Models.Position", "Position")
                        .WithMany("PositionRole")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_PositionRole_Position");

                    b.HasOne("Evoflare.API.Models.EcfRole", "Role")
                        .WithMany("PositionRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_PositionRole_EcfRole");
                });

            modelBuilder.Entity("Evoflare.API.Models.ProjectCareerPath", b =>
                {
                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("ProjectCareerPath")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_ProjectCareerPath_Organization");

                    b.HasOne("Evoflare.API.Models.Project", "Project")
                        .WithMany("ProjectCareerPath")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectCareerPath_Project");

                    b.HasOne("Evoflare.API.Models.EmployeeType", "Role")
                        .WithMany("ProjectCareerPath")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_ProjectCareerPath_Role");

                    b.HasOne("Evoflare.API.Models.Team", "Team")
                        .WithMany("ProjectCareerPath")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_ProjectCareerPath_Team");
                });

            modelBuilder.Entity("Evoflare.API.Models.ProjectPosition", b =>
                {
                    b.HasOne("Evoflare.API.Models.ProjectCareerPath", "CareerPath")
                        .WithMany("ProjectPosition")
                        .HasForeignKey("CareerPathId")
                        .HasConstraintName("FK_ProjectPosition_ProjectCareerPath");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("ProjectPosition")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_ProjectPosition_Organization");

                    b.HasOne("Evoflare.API.Models.Project", "Project")
                        .WithMany("ProjectPosition")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectPosition_Project");

                    b.HasOne("Evoflare.API.Models.RoleGrade", "RoleGrade")
                        .WithMany("ProjectPosition")
                        .HasForeignKey("RoleGradeId")
                        .HasConstraintName("FK_ProjectPosition_RoleGrade");
                });

            modelBuilder.Entity("Evoflare.API.Models.ProjectPositionCompetence", b =>
                {
                    b.HasOne("Evoflare.API.Models.Competence", "Competence")
                        .WithMany("ProjectPositionCompetence")
                        .HasForeignKey("CompetenceId")
                        .HasConstraintName("FK_ProjectPositionCompetence_EmpCompetence");

                    b.HasOne("Evoflare.API.Models.CompetenceLevel", "CompetenceLevel")
                        .WithMany("ProjectPositionCompetence")
                        .HasForeignKey("CompetenceLevelId")
                        .HasConstraintName("FK_ProjectPositionCompetence_EmpCompetenceLevel");

                    b.HasOne("Evoflare.API.Models.ProjectPosition", "ProjectPosition")
                        .WithMany("ProjectPositionCompetence")
                        .HasForeignKey("ProjectPositionId")
                        .HasConstraintName("FK_ProjectPositionCompetence_ProjectPosition");

                    b.HasOne("Evoflare.API.Models.RoleGrade", "RoleGrade")
                        .WithMany("ProjectPositionCompetence")
                        .HasForeignKey("RoleGradeId")
                        .HasConstraintName("FK_ProjectPositionCompetence_RoleGrade");
                });

            modelBuilder.Entity("Evoflare.API.Models.RoleCompetence", b =>
                {
                    b.HasOne("Evoflare.API.Models.Competence", "Competence")
                        .WithMany("RoleCompetence")
                        .HasForeignKey("CompetenceId")
                        .HasConstraintName("FK_EmpRoleCompetence_EmpCompetence");

                    b.HasOne("Evoflare.API.Models.EcfRole", "Role")
                        .WithMany("RoleCompetence")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EmpRoleCompetence_EcfRole");
                });

            modelBuilder.Entity("Evoflare.API.Models.RoleGrade", b =>
                {
                    b.HasOne("Evoflare.API.Models.EmployeeType", "EmployeeType")
                        .WithMany("RoleGrade")
                        .HasForeignKey("EmployeeTypeId")
                        .HasConstraintName("FK_CareerPath_EmployeeType");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("RoleGrade")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_CareerPath_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models.RoleGradeCompetence", b =>
                {
                    b.HasOne("Evoflare.API.Models.Competence", "Competence")
                        .WithMany("RoleGradeCompetence")
                        .HasForeignKey("CompetenceId")
                        .HasConstraintName("FK_RoleGradeCompetence_EmpCompetence");

                    b.HasOne("Evoflare.API.Models.CompetenceLevel", "CompetenceLevel")
                        .WithMany("RoleGradeCompetence")
                        .HasForeignKey("CompetenceLevelId")
                        .HasConstraintName("FK_RoleGradeCompetence_EmpCompetenceLevel");

                    b.HasOne("Evoflare.API.Models.RoleGrade", "RoleGrade")
                        .WithMany("RoleGradeCompetence")
                        .HasForeignKey("RoleGradeId")
                        .HasConstraintName("FK_CareerPathSkills_CareerPath");
                });

            modelBuilder.Entity("Evoflare.API.Models.Team", b =>
                {
                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("Team")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Team_Organization");

                    b.HasOne("Evoflare.API.Models.Project", "Project")
                        .WithMany("Team")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Team_Project");
                });

            modelBuilder.Entity("Evoflare.API.Models._360employeeEvaluation", b =>
                {
                    b.HasOne("Evoflare.API.Models.EmployeeEvaluation", "Evaluation")
                        .WithMany("_360employeeEvaluation")
                        .HasForeignKey("EvaluationId")
                        .HasConstraintName("FK_360EmployeeEvaluation_EmployeeEvaluation");

                    b.HasOne("Evoflare.API.Models.Employee", "EvaluatorEmployee")
                        .WithMany("_360employeeEvaluation")
                        .HasForeignKey("EvaluatorEmployeeId")
                        .HasConstraintName("FK_360EmployeeEvaluation_Employee");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("_360employeeEvaluation")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_360EmployeeEvaluation_Organization");
                });

            modelBuilder.Entity("Evoflare.API.Models._360evaluationResult", b =>
                {
                    b.HasOne("Evoflare.API.Models._360employeeEvaluation", "Evaluation")
                        .WithMany("_360evaluationResult")
                        .HasForeignKey("EvaluationId")
                        .HasConstraintName("FK_360EvaluationResult_360EmployeeEvaluation");

                    b.HasOne("Evoflare.API.Models._360questionnarieStatement", "_360questionnarieStatement")
                        .WithMany("_360evaluationResult")
                        .HasForeignKey("_360questionnarieStatementId")
                        .HasConstraintName("FK_360EvaluationResult_360QuestionnarieStatement");
                });

            modelBuilder.Entity("Evoflare.API.Models._360pendingEvaluator", b =>
                {
                    b.HasOne("Evoflare.API.Models.Employee", "Evaluator")
                        .WithMany("_360pendingEvaluator")
                        .HasForeignKey("EvaluatorId")
                        .HasConstraintName("FK_360PendingEvaluator_Employee");

                    b.HasOne("Evoflare.API.Models.Organization", "Organization")
                        .WithMany("_360pendingEvaluator")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_360PendingEvaluator_Organization");

                    b.HasOne("Evoflare.API.Models._360employeeEvaluation", "_360employeeEvaluation")
                        .WithMany("_360pendingEvaluator")
                        .HasForeignKey("_360employeeEvaluationId")
                        .HasConstraintName("FK_360PendingEvaluator_360PendingEvaluator");
                });

            modelBuilder.Entity("Evoflare.API.Models._360questionnarieStatement", b =>
                {
                    b.HasOne("Evoflare.API.Models._360questionnarie", "Questionnarie")
                        .WithMany("_360questionnarieStatement")
                        .HasForeignKey("QuestionnarieId")
                        .HasConstraintName("FK_360QuestionnarieStatement_360Questionnarie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Evoflare.API.Auth.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Evoflare.API.Auth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Evoflare.API.Auth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Evoflare.API.Auth.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evoflare.API.Auth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Evoflare.API.Auth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
