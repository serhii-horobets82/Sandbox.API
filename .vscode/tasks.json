{
  "version": "2.0.0",
  "inputs": [
    {
      "id": "migrationName",
      "type": "promptString",
      "description": "Name of migration",
      "default": "Initial"
    },
    {
      "id": "herokuAppName",
      "type": "promptString",
      "description": "Name of application",
      "default": "evoflare-app"
    },
    {
      "id": "herokuApp",
      "type": "pickString",
      "description": "Heroku app",
      "options": [
        "evoflare-api",
        "evoflare-api-dev",
        "evoflare-api-dev01",
        "evoflare-api-dev02",
        "evoflare-app",
        "api-evoflare"
      ],
      "default": "evoflare-api-dev"
    },
    {
      "id": "herokuUser",
      "type": "pickString",
      "description": "Heroku user",
      "options": [
        "dev01.evoflare@gmail.com",
        "dev02.evoflare@gmail.com",
        "dev03.evoflare@gmail.com",
        "dev04.evoflare@gmail.com",
        "dev05.evoflare@gmail.com"
      ],
      "default": "dev01.evoflare@gmail.com"
    }
  ],
  "tasks": [
    {
      "label": "ef: Context info",
      "command": "dotnet",
      "type": "process",
      "args": ["ef", "dbcontext", "info", "--context", "EvoflareDbContext"],
      "problemMatcher": []
    },
    {
      "label": "ef: Create migration",
      "command": "dotnet",
      "type": "process",
      "args": [
        "ef",
        "migrations",
        "add",
        "${input:migrationName}",
        "--context",
        "EvoflareDbContext"
      ],
      "problemMatcher": []
    },
    {
      "label": "ef: Update database",
      "command": "dotnet",
      "type": "process",
      "args": ["ef", "database", "update", "--context", "EvoflareDbContext"],
      "problemMatcher": []
    },
    {
      "label": "ef: Remove migration",
      "command": "dotnet",
      "type": "process",
      "args": ["ef", "migrations", "remove", "--context", "EvoflareDbContext"],
      "problemMatcher": []
    },
    {
      "label": "app: Build",
      "command": "dotnet",
      "type": "process",
      "args": ["build", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Run",
      "command": "dotnet",
      "type": "process",
      "args": ["run", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Generate seed-classes",
      "command": "dotnet",
      "type": "process",
      "group": "build",
      "args": [
        "run",
        "${workspaceFolder}/Evoflare.API.csproj",
        "export-data=true"
      ],
      "problemMatcher": []
    },
    {
      "label": "app: Generate empty db",
      "command": "dotnet",
      "type": "process",
      "group": "build",
      "args": [
        "run",
        "${workspaceFolder}/Evoflare.API.csproj",
        "only-migrate=true"
      ],
      "problemMatcher": []
    },
    {
      "label": "app: Publish",
      "command": "dotnet",
      "type": "process",
      "args": ["publish", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Watch",
      "command": "dotnet",
      "type": "process",
      "args": ["watch", "run", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Scaffold database",
      "type": "shell",
      "command": "echo Done",
      "group": "build",
      "dependsOrder": "sequence",
      "dependsOn": [
        "child-task: Scaffold database(dbo schema)",
        "child-task: Patch files"
      ],
      "problemMatcher": []
    },
    {
      "label": "child-task: Scaffold database(dbo schema)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "ef",
        "dbcontext",
        "scaffold",
        "\"${config:mssql.connections.0.connectionString}\"",
        "Microsoft.EntityFrameworkCore.SqlServer",
        "-c",
        "EvoflareDbContext",
        "-o",
        "Models",
        "-v",
        "--context-dir",
        "Data",
        "--schema",
        "dbo",
        "--data-annotations",
        "--force"
      ],
      "problemMatcher": []
    },
    {
      "label": "child-task: Patch files",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-ExecutionPolicy",
        "Unrestricted",
        "-NoProfile",
        "-File",
        "${cwd}/Scripts/patch.ps1"
      ],
      "problemMatcher": []
    },

    {
      "label": "REM docker(API): Build and run container",
      "type": "process",
      "command": "start-docker-api.cmd",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "problemMatcher": []
    },
    // ************************ HEROKU ************************
    {
      "label": "heroku: Login",
      "type": "shell",
      "command": "echo Use Email:${input:herokuUser};heroku login -i;heroku container:login;heroku apps;",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku: Create secondary DB (5 pcs)",
      "type": "shell",
      "command": [
        "heroku addons:create heroku-postgresql:hobby-dev -a ${input:herokuApp} --as DB01 --name db-${input:herokuApp}-01;",
        "heroku addons:create heroku-postgresql:hobby-dev -a ${input:herokuApp} --as DB02 --name db-${input:herokuApp}-02;",
        "heroku addons:create heroku-postgresql:hobby-dev -a ${input:herokuApp} --as DB03 --name db-${input:herokuApp}-03;",
        "heroku addons:create heroku-postgresql:hobby-dev -a ${input:herokuApp} --as DB04 --name db-${input:herokuApp}-04;",
        "heroku addons:create heroku-postgresql:hobby-dev -a ${input:herokuApp} --as DB05 --name db-${input:herokuApp}-05;",
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku: Create app",
      "type": "shell",
      "command": [
        "heroku apps:destroy ${input:herokuAppName} --confirm ${input:herokuAppName};",
        "heroku create ${input:herokuAppName};",
        "heroku addons:create heroku-postgresql:hobby-dev -a ${input:herokuAppName} --name db-${input:herokuAppName};",
        "heroku config:set ASPNETCORE_ENVIRONMENT=Docker ASPNETCORE_URLS=http://*:$PORT -a ${input:herokuAppName};",
        "heroku container:push web --recursive -a ${input:herokuAppName} --context-path ..\\;",
        "heroku container:release web -a ${input:herokuAppName};",
        "heroku logs -a ${input:herokuAppName} --tail"
      ],
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku: Deploy",
      "type": "shell",
      "command": [
        "heroku container:push web --recursive -a ${input:herokuApp} --context-path ..\\;",
        "heroku container:release web -a ${input:herokuApp};"
      ],
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku: Logs",
      "type": "shell",
      "command": "heroku logs -a ${input:herokuApp} --tail",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku: View config",
      "type": "shell",
      "command": "heroku config -a ${input:herokuApp}",
      "problemMatcher": []
    },
    {
      "label": "heroku: Set config",
      "type": "shell",
      "command": "heroku config:set ASPNETCORE_ENVIRONMENT=Docker ASPNETCORE_URLS=http://*:$PORT -a ${input:herokuApp}",
      "problemMatcher": []
    },
    {
      "label": "heroku: DB info",
      "type": "shell",
      "command": "heroku pg:info -a ${input:herokuApp}",
      "problemMatcher": []
    },
    {
      "label": "heroku: Reset DB",
      "type": "shell",
      "command": "heroku pg:reset DATABASE_URL",
      "problemMatcher": []
    },
    {
      "label": "heroku: Open",
      "type": "shell",
      "command": "heroku open -a ${input:herokuApp}",
      "problemMatcher": []
    },
    // ************************ DOCKER ************************
    {
      "label": "docker: Run registry",
      "type": "shell",
      "command": "docker run -d -p 50000:5000 --restart=always -v ./registry:/var/lib/registry --name evoflare-registry registry:2",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    //  ----------------------- Build  ------------------------
    {
      "label": "docker: Build API container",
      "type": "shell",
      "command": "docker build --no-cache --pull -t evoflare-api -f ./Dockerfile.api ..\\",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Build DB(mssql) container",
      "type": "shell",
      "command": "docker build --pull -t evoflare-db-mssql -f ./mssql/Dockerfile .",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Build DB(postgres) container",
      "type": "shell",
      "command": "docker build --pull -t evoflare-db-postgres -f ./postgres/Dockerfile . ",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    //  ----------------------- Run  --------------------------
    {
      "label": "docker(Registry): Run API image",
      "type": "shell",
      "command": "docker run --name evoflare-api -p 5000:80 -d -it localhost:50000/api",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Run DB(mssql) image",
      "type": "shell",
      "command": "docker run --name evoflare-db-mssql -p 14330:1433 -d -it -v ./mssql:/var/opt/mssql/data localhost:50000/db-mssql",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Run DB(postgres) image",
      "type": "shell",
      "command": "docker run --name evoflare-db-postgres -p 54320:5432 -d -it -v ./postgres:/var/lib/postgresql/data localhost:50000/db-postgres",
      "problemMatcher": []
    },
    //  ----------------------- Attach  ------------------------
    {
      "label": "docker: Attach to API container",
      "type": "shell",
      "command": "docker attach --sig-proxy evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    //  ----------------------- Start  ------------------------
    {
      "label": "docker: Start API container",
      "type": "shell",
      "command": "docker start evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Start DB(mssql) container",
      "type": "shell",
      "command": "docker start evoflare-mssql",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Start DB(postgres) container",
      "type": "shell",
      "command": "docker start evoflare-db-postgres",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    //  ----------------------- Stop --------------------------
    {
      "label": "docker: Stop API container",
      "type": "shell",
      "command": "docker stop evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Stop DB(mssql) container",
      "type": "shell",
      "command": "docker stop evoflare-mssql",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Stop DB(postgres) container",
      "type": "shell",
      "command": "docker stop evoflare-db-postgres",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    //  ----------------------- Common --------------------------
    {
      "label": "docker(Common): Remove all images",
      "type": "shell",
      "command": "docker rmi $(docker images -a -q) -f",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Open registry",
      "type": "shell",
      "windows": {
        "command": "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"
      },
      "args": ["http://localhost:50000/v2/_catalog"],
      "problemMatcher": []
    },
    {
      "label": "docker(Common): Start registry",
      "type": "shell",
      "command": "docker run -d -p 50000:5000 --restart always --name evoflare-registry -v ./registry:/var/lib/registry registry:latest",
      "problemMatcher": []
    },
    //  ----------------------- Tag image --------------------------
    {
      "label": "docker(Registry): Restore",
      "type": "shell",
      "command": "echo registry restore",
      "dependsOrder": "sequence",
      "dependsOn": [
        "docker(Common): Start registry",
        "docker(Registry): Tag API image",
        "docker(Registry): Tag DB(postgres) image",
        "docker(Registry): Tag DB(mssql) image",
        "docker(Registry): Push API image",
        "docker(Registry): Push DB(postgres) image",
        "docker(Registry): Push DB(mssql) image"
      ],
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Tag API image",
      "type": "shell",
      "command": "docker image tag evoflare-api localhost:50000/api",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Tag DB(postgres) image",
      "type": "shell",
      "command": "docker image tag evoflare-db-postgres localhost:50000/db-postgres",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Tag DB(mssql) image",
      "type": "shell",
      "command": "docker image tag evoflare-db-mssql localhost:50000/db-mssql",
      "problemMatcher": []
    },
    //  ----------------------- Push image --------------------------
    {
      "label": "docker(Registry): Push API image",
      "type": "shell",
      "command": "docker push localhost:50000/api",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Push DB(postgres) image",
      "type": "shell",
      "command": "docker push localhost:50000/db-postgres",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Push DB(mssql) image",
      "type": "shell",
      "command": "docker push localhost:50000/db-mssql",
      "problemMatcher": []
    },
    //  ----------------------- Pull image --------------------------
    {
      "label": "docker(Registry): Pull mssql image",
      "type": "shell",
      "command": "docker pull localhost:50000/db-mssql",
      "problemMatcher": []
    },
    {
      "label": "docker(Registry): Pull postgres image",
      "type": "shell",
      "command": "docker pull localhost:50000/db-postgres",
      "problemMatcher": []
    }
  ]
}
