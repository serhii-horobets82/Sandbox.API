{
  "version": "2.0.0",
  "inputs": [
    {
      "id": "migrationName",
      "type": "promptString",
      "description": "Name of migration",
      "default": "Initial"
    }
  ],
  "tasks": [
    {
      "label": "ef: Context info",
      "command": "dotnet",
      "type": "process",
      "args": ["ef", "dbcontext", "info", "--context", "EvoflareDbContext"],
      "problemMatcher": []
    },
    {
      "label": "ef: Create migration",
      "command": "dotnet",
      "type": "process",
      "args": [
        "ef",
        "migrations",
        "add",
        "${input:migrationName}",
        "--context",
        "EvoflareDbContext"
      ],
      "problemMatcher": []
    },
    {
      "label": "ef: Update database",
      "command": "dotnet",
      "type": "process",
      "args": ["ef", "database", "update", "--context", "EvoflareDbContext"],
      "problemMatcher": []
    },
    {
      "label": "ef: Remove migration",
      "command": "dotnet",
      "type": "process",
      "args": ["ef", "migrations", "remove", "--context", "EvoflareDbContext"],
      "problemMatcher": []
    },
    {
      "label": "app: Build",
      "command": "dotnet",
      "type": "process",
      "args": ["build", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Run",
      "command": "dotnet",
      "type": "process",
      "args": ["run", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Generate seed-classes",
      "command": "dotnet",
      "type": "process",
      "group": "build",
      "args": [
        "run",
        "${workspaceFolder}/Evoflare.API.csproj",
        "export-data=true"
      ],
      "problemMatcher": []
    },
    {
      "label": "app: Generate empty db",
      "command": "dotnet",
      "type": "process",
      "group": "build",
      "args": [
        "run",
        "${workspaceFolder}/Evoflare.API.csproj",
        "only-migrate=true"
      ],
      "problemMatcher": []
    },
    {
      "label": "app: Publish",
      "command": "dotnet",
      "type": "process",
      "args": ["publish", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Watch",
      "command": "dotnet",
      "type": "process",
      "args": ["watch", "run", "${workspaceFolder}/Evoflare.API.csproj"],
      "problemMatcher": []
    },
    {
      "label": "app: Scaffold database",
      "type": "shell",
      "command": "echo Done",
      "group": "build",
      "dependsOrder": "sequence",
      "dependsOn": [
        "child-task: Scaffold database(dbo schema)",
        "child-task: Patch files"
      ],
      "problemMatcher": []
    },
    {
      "label": "child-task: Scaffold database(dbo schema)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "ef",
        "dbcontext",
        "scaffold",
        "\"${config:mssql.connections.0.connectionString}\"",
        "Microsoft.EntityFrameworkCore.SqlServer",
        "-c",
        "EvoflareDbContext",
        "-o",
        "Models",
        "-v",
        "--context-dir",
        "Data",
        "--schema",
        "dbo",
        "--data-annotations",
        "--force"
      ],
      "problemMatcher": []
    },
    {
      "label": "child-task: Patch files",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-ExecutionPolicy",
        "Unrestricted",
        "-NoProfile",
        "-File",
        "${cwd}/Scripts/patch.ps1"
      ],
      "problemMatcher": []
    },
    {
      "label": "docker: Build and run DB(mssql) container",
      "type": "process",
      "command": "start-docker-sql.cmd",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Build and run DB(postgres) container",
      "type": "process",
      "command": "start-docker-postgres.cmd",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Start DB(mssql) container",
      "type": "shell",
      "command": "docker start evoflare-db",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker: Stop DB(mssql) container",
      "type": "shell",
      "command": "docker stop evoflare-db",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker(API): Build and run container",
      "type": "process",
      "command": "start-docker-api.cmd",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker(API): Attach to container",
      "type": "shell",
      "command": "docker attach --sig-proxy evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker(API): Stop container",
      "type": "shell",
      "command": "docker stop evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "docker(API): Start container",
      "type": "shell",
      "command": "docker start evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "docker"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku(API): Deploy",
      "type": "shell",
      "command": "echo Done",
      "group": "build",
      "dependsOrder": "sequence",
      "dependsOn": [
        "child-task: Build image",
        "child-task: Push to heroku",
        "child-task: Release to heroku",
        "heroku(API): Logs"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "child-task: Build image",
      "type": "shell",
      "command": "docker build --pull -t evoflare-api -f Dockerfile ..\\",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "child-task: Push to heroku",
      "type": "shell",
      "command": "heroku container:push web -a evoflare-api --context-path ..\\",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "child-task: Release to heroku",
      "type": "shell",
      "command": "heroku container:release web -a evoflare-api",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku(API): Logs",
      "type": "shell",
      "command": "heroku logs -a evoflare-api --tail ",
      "options": {
        "cwd": "${workspaceRoot}/Docker"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "heroku"
      },
      "problemMatcher": []
    },
    {
      "label": "heroku(API): Config",
      "type": "shell",
      "command": "heroku config -a evoflare-api",
      "problemMatcher": []
    },
    {
      "label": "heroku(DB): DB info",
      "type": "shell",
      "command": "heroku pg:info -a evoflare-api",
      "problemMatcher": []
    },
    {
      "label": "heroku(DB): Reset DB",
      "type": "shell",
      "command": "heroku pg:reset DATABASE_URL",
      "problemMatcher": []
    },
    {
      "label": "heroku(API): Open",
      "type": "shell",
      "command": "heroku open -a evoflare-api",
      "problemMatcher": []
    }
  ]
}
